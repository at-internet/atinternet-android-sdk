apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'
apply from: './publish-mavencentral.gradle'

group = 'com.atinternet'
version = '2.20.2'

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses true
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    maven {
        url 'https://developer.huawei.com/repo/'
    }
    jcenter() {
        content {
            includeModule("org.jetbrains.trove4j", "trove4j")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    compileOnly 'com.google.android.gms:play-services-ads:19.7.0'
    compileOnly 'com.huawei.hms:hms-ads-identifier:3.4.26.303'

    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'junit:junit:4.13.1'
}

clean {
    delete project.rootDir.absolutePath + '/delivery/'
    delete project.rootDir.absolutePath + '/documentation/'
    delete project.rootDir.absolutePath + '/build.properties'
    delete project.rootDir.absolutePath + '/ATInternet_Android_SDK_' + version + '.zip'
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'ATInternet Mobile Analytics Solutions for Android'
                url 'https://github.com/at-internet/atinternet-android-sdk'
                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection 'https://github.com/at-internet/atinternet-android-sdk.git'
                    developerConnection 'https://github.com/at-internet/atinternet-android-sdk.git'
                    url 'https://github.com/at-internet/atinternet-android-sdk'
                }
            }
        }
    }
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "tracker"
        websiteUrl = 'https://github.com/at-internet/atinternet-android-sdk'
        vcsUrl = 'https://github.com/at-internet/atinternet-android-sdk.git'
        licenses = ["MIT"]
        publish = true
    }
}

repositories {
    maven {
        url 'https://developer.huawei.com/repo/'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    compileOnly 'com.google.android.gms:play-services-ads:19.4.0'
    compileOnly 'com.huawei.hms:hms-ads-identifier:3.4.26.303'

    testImplementation 'org.robolectric:robolectric:4.2'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'junit:junit:4.12'
}

clean {
    delete project.rootDir.absolutePath + '/delivery/'
    delete project.rootDir.absolutePath + '/documentation/'
    delete project.rootDir.absolutePath + '/build.properties'
    delete project.rootDir.absolutePath + '/ATInternet_Android_SDK_' + version + '.zip'
}

task sourcesJar(type: Jar) {
    from project.rootDir.absolutePath + '/Tracker/src/main/java'
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = project.rootDir.absolutePath + '/Tracker/src/main/java'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = new File(project.rootDir, "documentation/" + version)
    failOnError false

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.header = "ATInternet Android SDK API " + version
    options.stylesheetFile = new File(projectDir, "docs-res/style.css")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
}

task createDelivery {
    def destination = project.rootDir.absolutePath + '/delivery/' + version + '/'
    doLast {
        copy {
            from 'build/outputs/aar/'
            into destination
            include('Tracker-release.aar')
            rename('Tracker-release.aar', 'Tracker.aar')
        }
        copy {
            from 'build/intermediates/aar_main_jar/release/'
            into destination
            include('classes.jar')
            rename('classes.jar', 'Tracker.jar')
        }
        copy {
            from '.'
            include '*.manifest.json'
            into destination
        }
        copy {
            from '.'
            include 'referential.json'
            into destination
        }
    }
}

task createBuildFile {
    def file = new File(project.rootDir, "build.properties")
    file.createNewFile()
    file.text = "version=" + version + "\n"
}

jacoco {
    toolVersion = "0.8.2"
}

def coverageSourceDirs = [
        project.rootDir.absolutePath + '/Tracker/src/main/java/com/atinternet/Tracker'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testReleaseUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"


    getClassDirectories().from(fileTree(
            dir: project.rootDir.absolutePath + '/Tracker/build/intermediates/javac/release/compileReleaseJavaWithJavac/classes/com/atinternet/tracker',
    ))

    getAdditionalSourceDirs().from(files(coverageSourceDirs))
    getSourceDirectories().from(files(coverageSourceDirs))
    getExecutionData().from(files(project.rootDir.absolutePath + '/Tracker/build/jacoco/testReleaseUnitTest.exec'))

    reports {
        xml.enabled true
        html.enabled false
    }
}