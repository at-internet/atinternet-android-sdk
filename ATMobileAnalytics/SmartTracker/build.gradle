apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }
}

def siteUrl = 'https://github.com/at-internet/atinternet-android-sdk'
def gitUrl = 'https://github.com/at-internet/atinternet-android-sdk.git'
group = "com.atinternet"
def standardVersion = "2.8.5"
version = standardVersion + "s"

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'ATInternet Mobile Analytics Solutions for Android'
                url siteUrl
                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "tracker"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["MIT"]
        publish = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.android.support:appcompat-v7:26.1.0'
    compileOnly 'com.google.android.gms:play-services-ads:11.8.0'
    compileOnly('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
    testImplementation 'org.robolectric:robolectric:3.3.2'
    testImplementation 'junit:junit:4.12'
}

clean {
    delete project.rootDir.absolutePath + '/delivery/'
    delete project.rootDir.absolutePath + '/documentation/'
    delete project.rootDir.absolutePath + '/build.properties'
    delete project.rootDir.absolutePath + '/ATInternet_Android_SDK_' + standardVersion + '.zip'
}

task sourcesJar(type: Jar) {
    from project.rootDir.absolutePath + '/SmartTracker/src/main/java'
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = project.rootDir.absolutePath + '/SmartTracker/src/main/java'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = new File(project.rootDir, "documentation/" + standardVersion)
    failOnError false

    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.header = "ATInternet Android SDK API " + standardVersion
    options.stylesheetFile = new File(projectDir, "docs-res/style.css")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task createDelivery {
    def destination = project.rootDir.absolutePath + '/delivery/' + standardVersion + '/'
    doLast {
        copy {
            from 'build/outputs/aar/'
            into destination
            include('SmartTracker-release.aar')
            rename('SmartTracker-release.aar', 'SmartTracker.aar')
        }
        copy {
            from 'build/intermediates/bundles/release/'
            into destination
            include('classes.jar')
            rename('classes.jar', 'SmartTracker.jar')
        }
        copy {
            from '.'
            include '*.manifest.json'
            into destination
        }
        task(createZipForAnalyser, type: Zip) {
            from destination
            include 'SmartTracker.jar'
            rename('SmartTracker.jar', 'Tracker.jar')
            archiveName 'ATInternet_Android_SDK_' + standardVersion + '.zip'
            destinationDir project.rootDir
        }.execute()
    }
}

task createBuildFile {
    def file = new File(project.rootDir, "build.properties")
    file.createNewFile()
    file.text = "version=" + standardVersion + "\n"
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        project.rootDir.absolutePath + '/SmartTracker/src/main/java/com/atinternet/Tracker'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testReleaseUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: project.rootDir.absolutePath + '/SmartTracker/build/intermediates/classes/release/com/atinternet/tracker',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files(project.rootDir.absolutePath + '/SmartTracker/build/jacoco/testReleaseUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
